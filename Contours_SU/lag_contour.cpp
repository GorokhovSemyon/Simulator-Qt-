#include "lag_contour.h"
#include <QDebug>

lag_contour::lag_contour(float delta)
{
    coreBlock = new ComputingBlock(delta);
    delta_t = delta;
    core_SU = new SU_CoreBlock(0.05);
}

void lag_contour::main_block(float Input, int Regim, int flagUpravleniya, int type_control)
{
   core_FeedBack_Distance_Speed();

   X[121][0]=Input;
   X[122][0]=K[71]*X[121][0];

   switch (Regim) ///--- 0 - ручной, 1 - автоматизированный, 3,4 - наведение
   {
       case 0:

           X[170][0] = X[122][0];
           break;

       case 1:
       case 2:

           if ( type_control == 0 ) //--- Включена система видеостабилизации
           {
               if (flagUpravleniya == 1)
               {
                   X[162][0]=X[122][0];
                   X[123][0]=X[162][0];
                   X[125][0]=K[72]*X[123][0];

                   //======Интегральный регулятор=========
                   X[126][0]=X[126][1]+((delta_t/2)*(X[125][0]+X[125][1]));
                   if ( (U_lag>K[73])&& (X[125][0]>0.0) )  X[126][0]=X[126][1]; //заморозка ПИ-регулятора
                   if ( (U_lag<(-K[73])) && (X[125][0]<0.0) )   X[126][0]=X[126][1];//заморозка ПИ-регулятора
                   X[126][1]=X[126][0]; X[125][1]=X[125][0];

                   Lag_po_SVS();
               }
               else
               {
                   X[170][0] = X[122][0];
               }

           }
           if ( type_control == 1 ) //--- Управление по акустическому лагу
           {
               if (flagUpravleniya == 1)
               {
                   X[123][0]=X[124][0]=X[122][0];
                   X[144][0]=K[85]*X[124][0];

                   //======Интегральный регулятор=========
                   X[145][0]=X[145][1]+((delta_t/2)*(X[144][0]+X[144][1]));
                   if ( (U_lag>K[83])&& (X[144][0]>0.0) )       X[145][0]=X[145][1]; //заморозка ПИ-регулятора
                   if ( (U_lag<(-K[83])) && (X[144][0]<0.0) )   X[145][0]=X[145][1]; //заморозка ПИ-регулятора
                   X[145][1]=X[145][0]; X[144][1]=X[144][0];

                   Lag_po_AL();
               }
               else
               {
                   X[170][0] = X[122][0];
               }

           }
           else
           {
               X[170][0] = X[122][0];
           }

           break;
       default:
           break;
   }
   U_lag = X[170][0];

}

void lag_contour::Lag_po_SVS()
{

    X[127][0]=X[126][0]-X[164][0];
    X[128][0]=X[127][0]*K[74];
    X[129][0]=X[128][0]*K[76];

    //=======ПИ-регулятор=======
    X[130][0]=X[130][1]+((delta_t/2)*(X[129][0]+X[129][1]));
    if (X[130][0]>K[77])   X[130][0]=K[77];
    if (X[130][0]<(-K[77]))   X[130][0]=(-K[77]);
    X[130][1]=X[130][0]; X[129][1]=X[129][0];

    X[131][0]=X[130][0]+X[128][0];
    X[132][0]=X[125][0]*K[75];
    X[133][0]=X[132][0]+X[131][0];

    X[135][0]=X[136][0]*K[78];
    X[134][0]=X[133][0]-X[135][0];

    X[170][0] = X[134][0];

}

void lag_contour::Lag_po_AL()
{

    X[146][0]=X[145][0]-X[160][0];
    X[147][0]=X[146][0]*K[86];
    X[148][0]=X[147][0]*K[87];

    //=======ПИ-регулятор=======
    X[149][0]=X[149][1]+((delta_t/2)*(X[148][0]+X[148][1]));
    if (X[149][0]>K[88])   X[149][0]=K[88];
    if (X[149][0]<(-K[88]))   X[149][0]=(-K[88]);
    X[149][1]=X[149][0]; X[148][1]=X[148][0];

    X[150][0]=X[149][0]+X[147][0];
    X[152][0]=X[144][0]*K[84];
    X[151][0]=X[152][0]+X[150][0];

    X[154][0]=X[155][0]*K[89];
    X[153][0]=X[151][0]-X[154][0];

    X[170][0] = X[153][0];

}

void lag_contour::core_FeedBack_Distance_Speed()
{
    //==================AL===============
   X[158][0] = X[156][0] - K[92];
   X[159][0] = X[158][0]*K[91];
   X[1007][0] = X[159][0];
   core_SU->sensor_filter(K[90], 0.005, X[1007], X[155], highfreq_ims_reinit);
   X[154][0] = X[155][0]*K[89];

   X[160][0] = coreBlock->integrationInputValue(X[159], X[160]);

    //=================SVS================

    X[137][0] = X[895][0]*K[80];
    core_SU->sensor_filter(K[79], 0.005, X[137], X[136],highfreq_ims_reinit);
    X[135][0] = X[136][0]*K[78];
    X[164][0] = X[898][0]*K[81];
}
